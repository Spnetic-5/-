{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/sp-lit/Desktop/cs/screens/UpdateScreen.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Text, Button } from 'react-native-elements';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport format from 'date-fns/format';\nimport { Picker } from '@react-native-picker/picker';\nimport { db } from \"../firebase\";\nimport firebase from 'firebase';\nimport parse from 'date-fns/parse';\n\nvar UpdateScreen = function UpdateScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      transactions = _useState2[0],\n      setTransactions = _useState2[1];\n\n  var itemId = route.params.itemId;\n  useLayoutEffect(function () {\n    navigation.setOptions({\n      title: 'Update Expense'\n    });\n  }, [navigation]);\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      input = _useState4[0],\n      setInput = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      amount = _useState6[0],\n      setAmount = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      submitLoading = _useState8[0],\n      setSubmitLoading = _useState8[1];\n\n  useEffect(function () {\n    var unsubscribe = db.collection('expense').doc(itemId).onSnapshot(function (snapshot) {\n      var _snapshot$data, _snapshot$data2, _snapshot$data3, _snapshot$data4;\n\n      return setInput((_snapshot$data = snapshot.data()) == null ? void 0 : _snapshot$data.text) & setAmount((_snapshot$data2 = snapshot.data()) == null ? void 0 : _snapshot$data2.price) & setSelDate(parse((_snapshot$data3 = snapshot.data()) == null ? void 0 : _snapshot$data3.userDate, 'dd/MM/yyyy', new Date())) & setSelectedLanguage((_snapshot$data4 = snapshot.data()) == null ? void 0 : _snapshot$data4.type);\n    });\n    return unsubscribe;\n  }, []);\n\n  var updateExpense = function updateExpense() {\n    if (input && amount && selDate && selectedLanguage) {\n      setSubmitLoading(true);\n      db.collection('expense').doc(itemId).update({\n        text: input,\n        price: amount,\n        date: selDate,\n        type: selectedLanguage,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        userDate: result\n      }).then(function () {\n        return clearInputFields();\n      }).catch(function (error) {\n        return alert(error.message);\n      });\n    } else {\n      setSubmitLoading(false);\n      alert('All fields are mandatory');\n    }\n  };\n\n  var clearInputFields = function clearInputFields() {\n    alert('Updated Successfully');\n    setInput('');\n    setAmount('');\n    setSelDate(new Date());\n    setSelectedLanguage('expense');\n    navigation.goBack();\n    setSubmitLoading(false);\n  };\n\n  var _useState9 = useState(new Date()),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selDate = _useState10[0],\n      setSelDate = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      show = _useState12[0],\n      setShow = _useState12[1];\n\n  var _useState13 = useState('date'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      mode = _useState14[0],\n      setMode = _useState14[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setSelDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  var result = format(selDate, 'dd/MM/yyyy');\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      selectedLanguage = _useState16[0],\n      setSelectedLanguage = _useState16[1];\n\n  return React.createElement(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    style: \"dark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Add Text\",\n    value: input,\n    onChangeText: function onChangeText(text) {\n      return setInput(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), show && React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: selDate,\n    mode: mode,\n    defaultValue: transactions == null ? void 0 : transactions.date,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    keyboardType: \"numeric\",\n    placeholder: \"Add Amount\",\n    value: amount,\n    onChangeText: function onChangeText(text) {\n      return setAmount(text);\n    },\n    defaultValue: transactions.price,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.input,\n    placeholder: \"Select Date\",\n    onPress: showDatepicker,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, result ? result : new Date()), React.createElement(Picker, {\n    selectedValue: selectedLanguage,\n    onValueChange: function onValueChange(itemValue, itemIndex) {\n      return setSelectedLanguage(itemValue);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, React.createElement(Picker.Item, {\n    label: \"Expense\",\n    value: \"expense\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"Income\",\n    value: \"income\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  })), React.createElement(Button, {\n    containerStyle: styles.button,\n    title: \"Update\",\n    onPress: updateExpense,\n    loading: submitLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default UpdateScreen;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFFFFF',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10\n  },\n  inputContainer: {\n    width: 300\n  },\n  input: {\n    height: 50,\n    borderColor: 'gray',\n    borderBottomWidth: 1,\n    marginBottom: 20\n  },\n  button: {\n    width: 300,\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["/home/sp-lit/Desktop/cs/screens/UpdateScreen.js"],"names":["StatusBar","React","useEffect","useLayoutEffect","useState","Text","Button","DateTimePicker","format","Picker","db","firebase","parse","UpdateScreen","route","navigation","transactions","setTransactions","itemId","params","setOptions","title","input","setInput","amount","setAmount","submitLoading","setSubmitLoading","unsubscribe","collection","doc","onSnapshot","snapshot","data","text","price","setSelDate","userDate","Date","setSelectedLanguage","type","updateExpense","selDate","selectedLanguage","update","date","timestamp","firestore","FieldValue","serverTimestamp","result","then","clearInputFields","catch","error","alert","message","goBack","show","setShow","mode","setMode","onChange","event","selectedDate","currentDate","Platform","OS","showMode","currentMode","showDatepicker","styles","container","inputContainer","itemValue","itemIndex","button","StyleSheet","create","backgroundColor","flex","alignItems","justifyContent","padding","width","height","borderColor","borderBottomWidth","marginBottom","marginTop"],"mappings":"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","sourcesContent":["import {StatusBar} from 'expo-status-bar'\nimport React, {useEffect, useLayoutEffect, useState} from 'react'\nimport {StyleSheet, View, KeyboardAvoidingView, TextInput} from 'react-native'\nimport {Text, Button} from 'react-native-elements'\nimport DateTimePicker from '@react-native-community/datetimepicker'\nimport format from 'date-fns/format'\nimport {Picker} from '@react-native-picker/picker'\nimport {db} from '../firebase'\nimport firebase from 'firebase'\nimport parse from 'date-fns/parse'\n\nconst UpdateScreen = ({route, navigation}) => {\n  const [transactions, setTransactions] = useState([])\n  const {itemId} = route.params\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: 'Update Expense',\n    })\n  }, [navigation])\n  const [input, setInput] = useState('')\n  const [amount, setAmount] = useState('')\n  const [submitLoading, setSubmitLoading] = useState(false)\n  useEffect(() => {\n    const unsubscribe = db\n      .collection('expense')\n      .doc(itemId)\n      .onSnapshot(\n        (snapshot) =>\n          setInput(snapshot.data()?.text) &\n          setAmount(snapshot.data()?.price) &\n          setSelDate(\n            parse(snapshot.data()?.userDate, 'dd/MM/yyyy', new Date())\n          ) &\n          setSelectedLanguage(snapshot.data()?.type)\n      )\n    return unsubscribe\n  }, [])\n\n  const updateExpense = () => {\n    if (input && amount && selDate && selectedLanguage) {\n      setSubmitLoading(true)\n      db.collection('expense')\n        .doc(itemId)\n        .update({\n          text: input,\n          price: amount,\n          date: selDate,\n          type: selectedLanguage,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          userDate: result,\n        })\n        .then(() => clearInputFields())\n        .catch((error) => alert(error.message))\n    } else {\n      setSubmitLoading(false)\n      alert('All fields are mandatory')\n    }\n  }\n\n  const clearInputFields = () => {\n    alert('Updated Successfully')\n    setInput('')\n    setAmount('')\n    setSelDate(new Date())\n    setSelectedLanguage('expense')\n    navigation.goBack()\n    setSubmitLoading(false)\n  }\n\n  // Date Picker\n  const [selDate, setSelDate] = useState(new Date())\n  const [show, setShow] = useState(false)\n  const [mode, setMode] = useState('date')\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date\n    setShow(Platform.OS === 'ios')\n    setSelDate(currentDate)\n  }\n  const showMode = (currentMode) => {\n    setShow(true)\n    setMode(currentMode)\n  }\n  const showDatepicker = () => {\n    showMode('date')\n  }\n\n  const result = format(selDate, 'dd/MM/yyyy')\n\n  // Select Dropdown\n  const [selectedLanguage, setSelectedLanguage] = useState()\n\n  return (\n    <KeyboardAvoidingView behavior='padding' style={styles.container}>\n      <StatusBar style='dark' />\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          placeholder='Add Text'\n          value={input}\n          // defaultValue={transactions.text}\n          onChangeText={(text) => setInput(text)}\n        />\n\n        {show && (\n          <DateTimePicker\n            testID='dateTimePicker'\n            value={selDate}\n            mode={mode}\n            defaultValue={transactions?.date}\n            is24Hour={true}\n            display='default'\n            onChange={onChange}\n          />\n        )}\n\n        <TextInput\n          style={styles.input}\n          keyboardType='numeric'\n          placeholder='Add Amount'\n          value={amount}\n          onChangeText={(text) => setAmount(text)}\n          defaultValue={transactions.price}\n        />\n\n        <Text\n          style={styles.input}\n          placeholder='Select Date'\n          onPress={showDatepicker}\n        >\n          {result ? result : new Date()}\n        </Text>\n\n        <Picker\n          selectedValue={selectedLanguage}\n          onValueChange={(itemValue, itemIndex) =>\n            setSelectedLanguage(itemValue)\n          }\n        >\n          <Picker.Item label='Expense' value='expense' />\n          <Picker.Item label='Income' value='income' />\n        </Picker>\n\n        <Button\n          containerStyle={styles.button}\n          title='Update'\n          onPress={updateExpense}\n          loading={submitLoading}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nexport default UpdateScreen\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFFFFF',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n  },\n  inputContainer: {\n    width: 300,\n  },\n  input: {\n    height: 50,\n    borderColor: 'gray',\n    borderBottomWidth: 1,\n    marginBottom: 20,\n  },\n  button: {\n    width: 300,\n    marginTop: 10,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}